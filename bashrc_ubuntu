# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1="\[\033[0;36m\][\[\033[1;34m\]\u\[\033[0;36m\]@\[\033[40;0;33m\]\h\[\033[0;35m\] \t\[\033[0;36m\]]\[\033[0;37m\] \w\[\033[0m\]\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions

PROMPT_COMMAND=__prompt_command

__prompt_command() {
    local CURR_EXIT="$?"
    PS1=""

    # Colors
    local CLR_PLAIN='\[\033[00m\]'
    local LIGHT_BLUE='\[\033[0;36m\]'
    local BOLD_BLUE='\[\033[1;34m\]'
    local NORM_YELLOW='\[\033[40;0;33m\]'
    local NORM_PURPLE='\[\033[0;35m\]'
    local YELLOW='\[\033[33m\]'
    local WHITE='\[\033[0;37m\]'
    local NORM_RED='\[\033[0;31m\]'
    local BOLD_RED='\[\033[1;31m\]'
    local NORM_GREEN='\[\033[0;32m\]'
    # test with
    #PS1="something ${LIGHT_BLUE}Blue ${CLR_PLAIN}${NORM_BLUE}Blue ${NORM_YELLOW}Yellow ${NORM_PURPLE}purple ${TEST}what ${NORM_RED}red ${NORM_GREEN}green ${CLR_PLAIN} ~ "
    
    if [ $USER == root ]; then
        CURRUSER="${BOLD_RED}\u${CLR_PLAIN}"
    PROMPTCHAR="${BOLD_RED}# ${CLR_PLAIN}"
    else
        CURRUSER="${BOLD_BLUE}\u${CLR_PLAIN}"
    PROMPTCHAR="${CLR_PLAIN}$ "
    fi


    if [ $CURR_EXIT != 0 ]; then
        EXIT="${NORM_RED}${CURR_EXIT}${CLR_PLAIN}"
    else
        EXIT="${NORM_GREEN}${CURR_EXIT}${CLR_PLAIN}"
    fi

    # Building the prompt
    PS1=""
    PS1+="${LIGHT_BLUE}["    # [
    PS1+="${CURRUSER}"       # user
    PS1+="${LIGHT_BLUE}@"    # @
    PS1+="${YELLOW}\h"       # hostname
    PS1+="${NORM_PURPLE} \t" # time h:m:s
    PS1+="${LIGHT_BLUE}]["   # ][
    PS1+="$EXIT"             # return code, green if 0, red otherwise
    PS1+="${LIGHT_BLUE}]"    # ]
    PS1+="${WHITE} \w"       # current work dir
    PS1+="${YELLOW}$(parse_git_branch)" # Git Branch if applicable
    PS1+=" ${PROMPTCHAR}" # closing prompt char

    # old one 
    # PS1+="\[\033[0;36m\][\[\033[1;34m\]\u\[\033[0;36m\]@\[\033[40;0;33m\]\h\[\033[0;35m\] \t\[\033[0;36m\]][$EXIT]\[\033[0;37m\] \w\[\033[0m\]\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "


}



alias v='vi'

# git stuff
# Git additions
source ~/git-completion.bash 2>/dev/null
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}


alias g=git
alias gs='git status'
alias gp='git push'
alias gca='git commit -a'
alias ga='git add'
alias gb='git branch'
alias gch='git checkout'

